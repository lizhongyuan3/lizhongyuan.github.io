{"pages":[{"title":"about","text":"","link":"/about/index.html"}],"posts":[{"title":"以太坊","text":"以太坊交易记录网址 etherscan etherscan cn 查询以太坊交易记录 这里以 Bored Ape Yacht Club 中的一个藏品为例，可以看到左下角详情页中标明了这个 NFT 最关键的三个信息：1. 合约地址；2.NFT 在合约中的编号，也就是 Token ID；3. 所在公链，也就是以太坊； 点击合约地址（Contract Address）右侧的链接，页面会自动跳转到对应合约地址的 Etherscan 浏览器页面。 点击页面中的 Contract 标签，便可以浏览这个合约的底层代码。 找到在页面中的函数 tokenURI，这便是该 NFT 合约查询元数据的专用函数。点开 tokenURI 函数后，我们可以看到以下界面。在上方的输入框中输入我们想要查询的 NFT 编号，也就是刚刚在 Opensea 看到的 Token ID 编号 6476，然后点击下方的查询按钮 Query。 可以看到，在点击完查询按钮后，系统返回了一串代码：ipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/6476这串代码便是在 NFT 的智能合约中保存的元数据。可以看出，这个 NFT 的元数据保存的是一段 ipfs 存储链接，因此可以判断该 NFT 采用的是去中心化的存储方式。读者可以使用 Brave 等支持 ipfs 浏览的浏览器进行查看，这个地址返回的便是该 NFT 所代表的猿猴图片。","link":"/2021/11/12/blockchain-eth/"},{"title":"nft 初见","text":"概念非同质化代币（英语：Non-Fungible Token，简称NFT）是一种被称为区块链数位账本上的数据单位，每个代币可以代表一个独特的数码资料。由于其不能互换，非同质化代币可以代表数位文件，如画作、声音、影片、游戏中的项目或其他形式的创意作品。虽然文件（作品）本身是可以无限复制的，但代表它们的代币在其底层区块链上被追踪，并为买家提供所有权证明。诸如以太币、比特币等加密货币都有自己的代币标准以定义对NFT的使用。加密猫小游戏 区块链标准 以太坊 ERC-721 Flow Tezos Solana 国内外 nft 应用 国内 腾讯“幻核”App平台 “蚂蚁链粉丝粒”小程序 NFT中国 DMall.im Ibox 优版权 Umx 加密空间 国外 OpenSea Rarible Nifty Gateway MakersPlace Super Rare Foundation KnownOrigin VIV3 Zora Async Art GoatNFT 币安NFT Larva Labs 具体介绍可参考：一文盘点国内外主要的 NFT 发行平台腾讯、支付宝、nft中国等区别 交易方式蚂蚁使用的是自主研发的蚂蚁链,腾讯使用的是至信链,二者均属于联盟链范畴。而NFT中国采用了以太坊侧链,全程链上交易,属于真正的去中心化交易平台,任何人都能随时读取信息和创作作品。联盟链虽然支持多中心化,但不是去中心化,仅支持部分相关用户读取写入 交易过程无论是阿里系还是腾讯系NFT,其所售卖的NFT作品均为复制品,可低成本的大量复制,无法体现NFT作品的稀缺性,这一点从根本上来说,没有解决传统艺术品的痛点。NFT中国采用的是以太坊侧链,是目前国内首个也是唯一一个去中心化数字资产交易平台,这得以保证数字资产永久存储在区块链上,维护数字资产的持久性和不可篡改性,藏品可以在二级市场自由交易和流通。 引用 主流 NFT 项目的元数据存储方式 不存储 有些 NFT 项目在链上完全找不到任何关于其图片存储位置的信息，甚至合约中都没有存放元数据的函数。这种存储方式只在 NFT 出现的早期被某些化石级项目所采用，最典型的便是 CryptoPunks。 链上存储 链上存储也常被习惯性地称为「永久存储」 所存数据的永久性与安全性都得到了更好地保障。但同时缺点也很明显，那便是以太坊的链上存储成本十分昂贵，难以存储更加复杂的图形。 去中心化存储采用去中心化存储有以下几个显著的优点： 不可篡改性：由于其用于寻址存储文件的域名中包含了文件的哈希值，因此其与区块链一样，具有不可篡改的特性，更符合加密原生精神； 存储成本更低：对于目前的大多数图片类项目，基本上一台可以长期联网的个人电脑就可以保证数据的长期存储。即便采用结合了区块链激励机制的 filecoin 等存储激励层，其成本相对于在以太坊存储的成本依然小到可以忽略不计；当然去中心化存储也存在一些缺点， 那就是数据存储的永久性并不能很好的得到保证。对于没有结合 filecoin 激励层的 ipfs 存储，一旦负责存储的节点全部离线，所存的数据依然有可能丢失。 中心化存储这种存储方式长期看将面临两个主要风险。一是数据可以被网站的所有者所篡改，二是网站有可能在某一天失去维护导致链接无法访问。 无所谓在哪里存储之所以在这里称其为无所谓在哪里存储，是因为这类 NFT 的价值与其元数据的存储方式没有直接的关系，即便这些 NFT 不保存元数据或修改了元数据，也不会对这些 NFT 的价值产生显著影响。但是与图片类 NFT 不同的是，作为游戏中角色或道具的 NFT，其主要价值并不来源于其能够在网页前端显示的图片，而是其在游戏中具有的功能和属性。比如一个 NFT 代表的游戏角色的攻击力越高，便越有可能在对战中取得胜利，因此其价值便越高。而这种 NFT 元数据中存储的信息，只是类似于一个游戏角色的皮肤，即使被修改也不会影响其游戏属性。排行(赛迪研究院)公有链指数排行币界网咨询王家卫推出首个电影NFT《花样年华一剎那》","link":"/2021/11/03/blockchain-nft/"},{"title":"db-mongo-near","text":"需求 判断某个位置是否偏移预定路线 比如离开指定路线 x 米。 已有数据 spring boot 2.7.3、mongo 数据库 4.2 高德路径规划 根据返回的数据整理。 一个实时的位置点 实现思路 自己可实现 根据算法点到直线的距离（麻烦且耗时） mongo 的 near 函数 以实时位置点为圆心 x 为半径画圆 判断指定的路线和圆是否有重叠 有的话说明未偏移 反之偏移 实操 数据结构123456789101112131415package com.example.mongo;import lombok.Data;import org.springframework.data.mongodb.core.geo.GeoJsonMultiLineString;import org.springframework.data.mongodb.core.index.GeoSpatialIndexType;import org.springframework.data.mongodb.core.index.GeoSpatialIndexed;import org.springframework.data.mongodb.core.mapping.Document;@Data@Document(&quot;route&quot;)public class Route { private String name; @GeoSpatialIndexed(type = GeoSpatialIndexType.GEO_2DSPHERE) private GeoJsonMultiLineString lines;} $nearSphere 函数的方式 123456789101112 db.route.find({ lines: { $nearSphere: { $geometry: { type : &quot;Point&quot;, coordinates : [ 116.480891, 39.98937 ] }, $minDistance: 0, $maxDistance: 30 } }}) 解释 route Collection 集合名lines 需要匹配的轨迹是多line的数组 当然也可以是任何 GeoJSONgeometry 用于指定与其他 GeoJSON 一起参与运算 $geoWithin + $centerSphere 12345{&lt;location field&gt;: { $geoWithin: { &lt;shape operator&gt;: &lt;coordinates&gt; } }} shape operator 运算符包含 $box,$polygon,$center,and$centerSphere 123456789101112131415db.route.find( { &quot;lines&quot;: { &quot;$geoWithin&quot;: { &quot;$centerSphere&quot;: [ [ 129.0, 49.98937 ], 0.000004703567828662194 ] } } }) 解释 route Collection 集合名lines 需要匹配的轨迹是多line的数组 当然也可以是任何 GeoJSON0.004703567828662194 这个很关键 这个圆的半径以弧度测量1(km/千米) = 1/6378.137(弧度) 1(mi/英里) = 1/3963.191(弧度)","link":"/2022/09/16/db-mongo-near/"},{"title":"disco_local","text":"Disco_DiffusionDisco Diffusion 是发布于 Google Colab 平台的一款利用人工智能深度学习进行数字艺术创作的工具，它是基于 MIT 许可协议的开源工具，可以在 Google Drive 直接运行。我是将其部署在腾讯云服务器进行运行的，然后速度相对较快一点。 部署流程 购买一台gpu服务器 必须是英伟达显卡，AMD不支持 建议配置 gpu 16g+ 我本地的使用情况 安装 NVIDIA 驱动、cuda、cudnn 腾讯云参考 本系统采用腾讯云镜像市场安装方式 版本如下 进入服务器 (但腾讯云服务器下载外网资源很慢 所以这种方式一般会执行失败) 国内可采用第四步代替123456789101112git clone https://github.com/alembics/disco-diffusion.git// 在 docker/prep 目录下docker build -t disco-diffusion-prep:5.1 .// 在 docker/main 目录下docker build -t disco-diffusion:5.1 .docker run --rm -it \\ -v $(echo ~)/disco-diffusion/images_out:/workspace/code/images_out \\ -v $(echo ~)/disco-diffusion/init_images:/workspace/code/init_images \\ --gpus=all \\ --name=&quot;disco-diffusion&quot; --ipc=host \\ --user $(id -u):$(id -g) \\disco-diffusion:5.1 python disco-diffusion/disco.py 克隆我仓库下的版本 对外网东西做了本地化修改12345678910111213git clone https://gitee.com/lizhongyuan3/disco-diffusion.git// 在 docker/prep 目录下docker build -t disco-diffusion-prep:5.1 .// 在 docker/main 目录下docker build -t disco-diffusion:5.1 .docker run --rm -it \\ -v $(echo ~)/disco-diffusion/images_out:/workspace/code/images_out \\ -v $(echo ~)/disco-diffusion/init_images:/workspace/code/init_images \\ -v /root/disco-diffusion/disco.py:/workspace/code/disco-diffusion/disco.py \\ --gpus=all \\ --name=&quot;disco-diffusion&quot; --ipc=host \\ --user disco:disco \\disco-diffusion:5.1 python disco-diffusion/disco.py 资源包资源包下载请联系我 分享给你阿里网盘连接","link":"/2022/06/14/disco-local/"},{"title":"docker &#x2F;var&#x2F;lib&#x2F;docker&#x2F; 磁盘满了","text":"停止docker服务。 1systemctl stop docker 迁移 /var/lib/docker 目录。 创建新的docker目录 例：/data/docker/lib/docker 迁移/var/lib/docker目录下面的文件到 /data/docker/lib/docker 1rsync -avz /var/lib/docker /data/docker/lib/ 编辑 /etc/docker/daemon.json 文件 123{ &quot;data-root&quot;: &quot;/data/docker/lib/docker&quot;} 重新加载 docker 123systemctl daemon-reloadsystemctl restart dockersystemctl enable docker 检查 12# docker infoDocker Root Dir: /data/docker/lib/docker 启动成功后，再确认之前的镜像还在 12docker ps -adocker images 确定容器没问题后删除/var/lib/docker/目录中的文件。","link":"/2022/07/05/docker-disk/"},{"title":"docker 清理日志","text":"日志文件过大暂时清理(治标) 命令会按照升序的方式对于容器文件夹进行排序，并列出容器文件夹的大小 du -d1 -h /var/lib/docker/containers | sort -h 选择你要清理的容器进行清理 cat /dev/null &gt; /var/lib/docker/containers/container_id/container_log_name 批量清理(治标) 新建 clean_docker_log.hs chmod +x clean_docker_log.sh ./clean_docker_log.sh12345678910111213141516#!/bin/shecho &quot;=================== start clean docker containers logs ==========================&quot; logs=$(find /var/lib/docker/containers/ -name *-json.log)for log in $logs;do echo &quot;clean logs:&quot; echo $log cat /dev/null&gt;$logdoneecho &quot;==================== end clean docker containers logs ==========================&quot;echo `date` 启动时限制(治本)docker rundaemon.json 设置(治本)123456# vim /etc/docker/daemon.json{ &quot;log-driver&quot;:&quot;json-file&quot;, &quot;log-opts&quot;: {&quot;max-size&quot;:&quot;500m&quot;, &quot;max-file&quot;:&quot;3&quot;}} max-size=500m，意味着一个容器日志大小上限是 500M， max-file=3，意味着一个容器有三个日志，分别是 id+.json、id+1.json、id+2.json。 // 重启docker守护进程 12systemctl daemon-reloadsystemctl restart docker 注意：设置的日志大小，只对新建的容器有效。","link":"/2022/07/04/docker-log/"},{"title":"docker 时区","text":"docker 8 小时建立docker 经常会出现 docker 日志的时间和正常时间相差 8小时 通过date -R 查看时区也没有问题 这是因为 date 指令对应的是 /etc/localtime 时区的修改要通过设置 /etc/timezone 否则调整了时间格式，本机所属的时区仍保持不变. /etc/localtime和/etc/timezone 区别 /etc/localtime是用来描述本机时间， /etc/timezone是用来描述本机所属的时区 调整了时间格式，本机所属的时区仍保持不变. 在linux中，有一些程序会自己计算时间，不会直接采用带有时区的本机时间格式，会根据UTC时间和本机所属的时区等计算出当前的时间。比如jdk应用，时区为“Etc/UTC”，本机时间改为北京时间，通过java代码中new 出来的时间还是utc时间，所以必须得修正本机的时区。读取时区的步骤参考tz = getPlatformTimeZoneID()，这个函数内容，就不贴了，可以自己看下，总计起来，在Linux系统上，大概过程为以下几步： 1.先找“TZ”变量，没有，到2， 2.读/etc/timezone，没有到3, 3.比较/etc/localtime文件与”/usr/share/zoneinfo目录下所有时区文件，如果有一致的，就为该时区，如果没有，到4, 4.默认为标准GMT 时区修改方法 java -jar -Duser.timezone=GMT+08 xxx.jar System.setProperty(“user.timezone”,”GMT +08”);结果1234// java.util.TimeZone#setDefaultZoneString zoneID = AccessController.doPrivileged(new GetPropertyAction(&quot;user.timezone&quot;));// 该地方可以获取到修改的时区 修改docker 时区 方法一终端执行 date命令，查看宿主服务器的时区是否正确如果正确： 执行 docker cp /usr/share/zoneinfo/Asia/Shanghai 容器ID:/etc/localtime 将本地时间拷贝到docker内部 docker cp /usr/share/zoneinfo/Asia/Shanghai poetry:/etc/localtime 方法二如果宿主服务器时间本身有问题，可以直接修改宿主机时间，然后执行法一也可以直接修改docker内部时区，执行命令：CentOSecho “Asia/shanghai” &gt; /etc/timezone;Ubuntucp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 方法三创建时修改增加映射使用主机时区 v /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime /etc/timeone和/etc/localtime区别","link":"/2022/06/21/docker-timezone/"},{"title":"git 上传下载报错","text":"报错信息12345remote: Password authentication is not available for Git operations.remote: You must use a personal access token or SSH key.remote: See https://github.ibm.com/settings/tokens or'https://github.ibm.com/xx/xx.git/': The requested URL returned error: 403 官方文章 解决方案登录github，生成个人令牌进行认证即可 个人令牌，双因素认证步骤 登录 github 选择头像 Settings Developer settings OAuth AppsPersonal access tokensPersonal access tokens Generate new token 填写描述、过期时间、选择权限范围 创建即可 复制生成的令牌备用 ==只会出现一次！！！== 后续在需要输入 git 密码的部分输入令牌即可 报错信息1github|fatal:unable to access|OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com 443 解决方案 设置 git config –global http.sslVerify false","link":"/2021/10/29/git-error/"},{"title":"hexo-create","text":"俗话说 不总结的工程师不是好工程师，但是从0编写网站往往不是我们擅长的，hexo 👨🏻‍💻 的福音，借助 github 平台免费实现网站部署。 在 github 新建一个 public 仓库 仓库名必须为 xx.github.io 其中 xx 为 github 登录名 安装运行123456// 全局安装hexo npm install -g hexo// 初始化hexo init// 本地运行hexo s 部署 github 打开文件夹下的 _congif.yml1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git # https://github.com/TJ-XiaJiaHao/TJ-XiaJiaHao.github.io repo: 第一步新建的仓库地址 branch: master 代码推送工具1npm install hexo-deployer-git --save 推送12hexo cleanhexo deploy 创建新文章1hexo new 'xx' 插件 搜索插件 “hexo-generator-searchdb”: “^1.4.0”","link":"/2021/10/29/hexo-create/"},{"title":"hexo icarus","text":"icarus 这个主题是我比较喜欢的，要是你要有类似的需求，就请参照着来吧，💪🏻。 在博客文件主目录1git clone https://github.com/ppoffice/hexo-theme-icarus themes/icarus 配置主题 打开文件夹下的_congif.ymltheme: icarus","link":"/2021/10/29/hexo-icarus/"},{"title":"password","text":"3a325dc39ad404746d7c8526f2f7a082b0059b527f1bb380192b222d9a260ebd You must enter the password to read.","link":"/2021/10/28/hexo-password/"},{"title":"java-matlab","text":"mac 环境 java 1.8 R2019b (9.7) macos Mojave 10.14.6 本地运行 下载 MATLAB Runtime 下载地址 将 MATLAB jar 引入到项目里 就可使用 jar 的类和方法 安装 MATLAB Runtime centos 7.6 wget https://ssd.mathworks.com/supportfiles/downloads/R2019b/Release/9/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2019b_Update_9_glnxa64.zip unzip -d MATLAB MATLAB_Runtime_R2019b_Update_9_glnxa64.zip cd MATLAB/ ./install -mode silent -agreeToLicense yes macos Mojave 10.14.6 可视化界面点击即可设置环境变量 centos 7.6 vim ~/.bash_profile 设置变量1234567891011export LD_LIBRARY_PATH=&quot;${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}\\/usr/local/MATLAB/MATLAB_Runtime/R2022b/runtime/glnxa64:\\/usr/local/MATLAB/MATLAB_Runtime/R2022b/bin/glnxa64:\\/usr/local/MATLAB/MATLAB_Runtime/R2022b/sys/os/glnxa64:\\/usr/local/MATLAB/MATLAB_Runtime/R2022b/extern/bin/glnxa64&quot;&lt;!-- 本机设置 --&gt;export LD_LIBRARY_PATH=&quot;${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}\\/usr/local/MATLAB/MATLAB_Runtime/v97/runtime/glnxa64:\\/usr/local/MATLAB/MATLAB_Runtime/v97/bin/glnxa64:\\/usr/local/MATLAB/MATLAB_Runtime/v97/sys/os/glnxa64:\\/usr/local/MATLAB/MATLAB_Runtime/v97/extern/bin/glnxa64&quot; mac vim ~/.bash_profile 设置变量1234567891011export DYLD_LIBRARY_PATH=&quot;${DYLD_LIBRARY_PATH:+${DYLD_LIBRARY_PATH}:}\\&lt;MATLAB_RUNTIME_INSTALL_DIR&gt;/runtime/maci64:\\&lt;MATLAB_RUNTIME_INSTALL_DIR&gt;/bin/maci64:\\&lt;MATLAB_RUNTIME_INSTALL_DIR&gt;/sys/os/maci64:\\&lt;MATLAB_RUNTIME_INSTALL_DIR&gt;/extern/bin/maci64&quot;&lt;!-- 本机设置 --&gt;export DYLD_LIBRARY_PATH=&quot;${DYLD_LIBRARY_PATH:+${DYLD_LIBRARY_PATH}:}\\/Applications/MATLAB/MATLAB_Runtime/v97/runtime/maci64:\\/Applications/MATLAB/MATLAB_Runtime/v97/bin/maci64:\\/Applications/MATLAB/MATLAB_Runtime/v97/sys/os/maci64:\\/Applications/MATLAB/MATLAB_Runtime/v97/extern/bin/maci64&quot;","link":"/2022/07/28/java-matlab/"},{"title":"kubesphere-redis","text":"tip:建立在一个新的空间 新的用户下 安装 开启应用商店 新建项目 基于模板应用 搜索 redis 选择对应版本 对应项目 设置密码 设置存储卷大小 详细配置可设置yml","link":"/2022/07/19/kubesphere-redis/"},{"title":"linux-expansion","text":"用到的命令 使用命令查看磁盘空间情况 1df -h 使用命令查看指定目录空间情况 1du -h --max-depth=1 /opt 查看当前目录空间使用情况 1du -h 操作步骤 查看分区磁盘情况 1df -TH 备份home分区文件 下列选择一种即可 12tar cvf /tmp/home.tar /homecp /home /homebak 卸载/home 1umount /home a. 如果无法卸载，先终止使用/home文件系统的进程 1fuser -km /home/ 删除/home所在的lv 1lvremove /dev/mapper/centos-home 扩展/root所在的lv 1lvextend -L +100G /dev/mapper/centos-root 扩展/root文件系统 1xfs_growfs /dev/mapper/centos-root 重新创建home lv （创建时计算好剩余的磁盘容量，建议比剩余小1G左右） 12vgdisplay #看下可使用剩余空间再进行创建lvcreate -L 41G -n /dev/mapper/centos-home 创建文件系统 1mkfs.xfs /dev/mapper/centos-home 挂载home 1mount /dev/mapper/centos-home home文件恢复 下列选择一种即可 12tar xvf /tmp/home.tar -C /home/mv -r homebak/ /home/ 再次使用df -h查看系统磁盘大小","link":"/2022/08/19/linux-expansion/"},{"title":"mybatis-code-generator","text":"mybatis 代码生成器参考官网pom.xml 引入依赖 注意 spring boot 项目spring-boot-starter-freemarker 会管理版本 123456789&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; &lt;version&gt;3.3.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;&lt;/dependency&gt; FreemarkerCodeGenerator 代码生成器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121package com.xinou.web.config.code_generator;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.core.toolkit.StringPool;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.InjectionConfig;import com.baomidou.mybatisplus.generator.config.*;import com.baomidou.mybatisplus.generator.config.po.TableInfo;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;import com.xinou.web.base.EntityBase;import java.util.ArrayList;import java.util.List;/** * 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中 * * @author lizhongyuan */public class FreemarkerCodeGenerator { public static void main(String[] args) { // 代码生成器 AutoGenerator mpg = new AutoGenerator(); // 全局配置 GlobalConfig gc = new GlobalConfig(); String projectPath = System.getProperty(&quot;user.dir&quot;); // 输出的位置 gc.setOutputDir(projectPath + &quot;/web/src/main/java&quot;); gc.setAuthor(&quot;lizhongyuan&quot;); gc.setIdType(IdType.AUTO); gc.setOpen(false); // 是否生成swagger2 gc.setSwagger2(true); gc.setFileOverride(true); mpg.setGlobalConfig(gc); // 数据源配置 DataSourceConfig dsc = new DataSourceConfig(); // 数据连接 dsc.setUrl(&quot;jdbc:mysql://578d7e0e5ca35.bj.cdb.myqcloud.com:3449/rongye_crm?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;); dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;); // 数据库用户名 dsc.setUsername(&quot;***&quot;); // 数据库密码 dsc.setPassword(&quot;***&quot;); //自定义类型转化 不自定义 数据库的tinyint到java 会变成 boolean dsc.setTypeConvert(new MySqlTypeConvert()); mpg.setDataSource(dsc); // 包配置 PackageConfig pc = new PackageConfig(); // 包的路径 pc.setParent(&quot;com.xinou.web&quot;); mpg.setPackageInfo(pc); // 自定义配置 InjectionConfig cfg = new InjectionConfig() { @Override public void initMap() { // to do nothing } }; String templatePath = &quot;/templates/mapper.xml.ftl&quot;; // 自定义输出配置 List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;(); // 自定义配置会被优先输出 focList.add(new FileOutConfig(templatePath) { @Override public String outputFile(TableInfo tableInfo) { // .xml位置 // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！ return projectPath + &quot;/web/src/main/resources/mappers/&quot; + tableInfo.getEntityName() + &quot;Mapping&quot; + StringPool.DOT_XML; } }); cfg.setFileOutConfigList(focList); mpg.setCfg(cfg); // 配置模板 mpg.setTemplate(new TemplateConfig().setXml(null)); // 策略配置 StrategyConfig strategy = new StrategyConfig(); strategy.setNaming(NamingStrategy.underline_to_camel); strategy.setColumnNaming(NamingStrategy.underline_to_camel); // 实体的公共父类 strategy.setSuperEntityClass(EntityBase.class); strategy.setEntityLombokModel(true); strategy.setChainModel(true); //是否生成实体时，生成字段注解 strategy.setEntityTableFieldAnnotationEnable(true); // 是否生成controller strategy.setRestControllerStyle(true); // 实体基类 strategy.setSuperEntityColumns(&quot;id&quot;, &quot;gmt_create&quot;, &quot;gmt_modified&quot;, &quot;is_delete&quot;); strategy.setControllerMappingHyphenStyle(true); strategy.setTablePrefix(pc.getModuleName() + &quot;_&quot;); // 要忽略的表 strategy.setExclude( &quot;rel_object_content&quot;, &quot;sys_app&quot;, &quot;sys_carousel&quot;, &quot;sys_msg_log&quot;, &quot;sys_permission&quot;, &quot;sys_re_role_permission&quot;, &quot;sys_re_user_app&quot;, &quot;sys_re_user_role&quot;, &quot;sys_resources&quot;, &quot;sys_role&quot;, &quot;sys_user&quot; ); mpg.setStrategy(strategy); mpg.setTemplateEngine(new FreemarkerTemplateEngine()); mpg.execute(); }} 自定义转换的类12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.xinou.web.config.code_generator;import com.baomidou.mybatisplus.generator.config.GlobalConfig;import com.baomidou.mybatisplus.generator.config.ITypeConvert;import com.baomidou.mybatisplus.generator.config.rules.DbColumnType;import com.baomidou.mybatisplus.generator.config.rules.IColumnType;/** * @author lizhongyuan */public class MySqlTypeConvert implements ITypeConvert { @Override public IColumnType processTypeConvert(GlobalConfig globalConfig, String fieldType) { String t = fieldType.toLowerCase(); if (t.contains(&quot;char&quot;)) { return DbColumnType.STRING; } else if (t.contains(&quot;bigint&quot;)) { return DbColumnType.LONG; } else if (t.contains(&quot;tinyint(1)&quot;)) { return DbColumnType.INTEGER; } else if (t.contains(&quot;int&quot;)) { return DbColumnType.INTEGER; } else if (t.contains(&quot;text&quot;)) { return DbColumnType.STRING; } else if (t.contains(&quot;bit&quot;)) { return DbColumnType.BOOLEAN; } else if (t.contains(&quot;decimal&quot;)) { return DbColumnType.BIG_DECIMAL; } else if (t.contains(&quot;clob&quot;)) { return DbColumnType.CLOB; } else if (t.contains(&quot;blob&quot;)) { return DbColumnType.BLOB; } else if (t.contains(&quot;binary&quot;)) { return DbColumnType.BYTE_ARRAY; } else if (t.contains(&quot;float&quot;)) { return DbColumnType.FLOAT; } else if (t.contains(&quot;double&quot;)) { return DbColumnType.DOUBLE; } else if (t.contains(&quot;date&quot;) || t.contains(&quot;time&quot;) || t.contains(&quot;year&quot;)){ return DbColumnType.DATE; } else { return DbColumnType.STRING; } }}","link":"/2020/09/27/mybatis-code-generator/"},{"title":"npm-publish","text":"上传npm 注册npm账号 地址 在项目的目录下执行 npm login ==镜像源要切换回npm== npm publish 输入用户名 密码 邮箱即可 ==账号要是验证过的 npm 官网上先验证邮箱== npm unpublish xx –force 删除npm包 ==可能要动态验证码 需要手机下载Authenticator==","link":"/2021/04/04/npm-publish/"},{"title":"remote-jvm-debug","text":"当我们线上测试环境的项目出问题的时候，我们可以用此方式进行远程debug 注意只能用于测试环境 正式环境会造成系统阻塞 注意本地代码和线上代码要一致操作步骤 把项目打包 在服务器把项目启动 启动命令为:1java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -jar xxx.jar transport=dt_socket 表示用socket模式进行数据传输 dt_shmem:采用共享内存的方式连接，支持有限，仅仅支持windows平台 server=y 表示当前是调试服务端 server=n 则表示调试客户端 suspend=n 表示启动时不中断 address=5005 表示调试服务器的端口号 需要服务器防火墙放行 本地配置远程调试 以debug启动该 remote jvm debug 然后选在denug的代码即可","link":"/2022/06/15/remote-jvm-debug/"},{"title":"spring-jackson","text":"异常信息 jackson.databind.exc.InvalidDefinitionException cannot deserialize from Object value 原因 在该实体类中添加了一个为了方便实例化该类用的构造函数，导致JVM不会添加默认的无参构造函数，而jackson的反序列化需要无参构造函数，因此报错。 解决 补上一个无参构造器 原理 参考","link":"/2022/09/17/spring-jackson/"},{"title":"umi、post 文件下载","text":"umi + post 下载 参考 注意点 responseType: ‘blob’ 必须指定 123456789101112131415161718192021222324252627282930import React from 'react';import { Button } from 'antd';import 'antd/dist/antd.css';import request from 'umi-request';export default () =&gt; { function download() { request('/down', { method: 'POST', // 必须加responseType: 'blob', responseType: 'blob', }).then(res =&gt; { const blob = new Blob([res]); //注意拿到的是数据流！！ const objectURL = URL.createObjectURL(blob); let btn = document.createElement('a'); btn.download = '文件.docx'; //文件类型 btn.href = objectURL; btn.click(); URL.revokeObjectURL(objectURL); btn = null; }); } return ( &lt;&gt; &lt;Button type=&quot;primary&quot; onClick={download}&gt; 下载文件 &lt;/Button&gt; &lt;/&gt; );};","link":"/2021/10/29/umi-post-down/"},{"title":"websites","text":"前端 组件化H5播放器框架 实时音视频 jelly/NutUI 设备检测 js录音 数据可视化/highcharts/外产 数据可视化/highcharts/国产-百度 3天精通React 后端 WxJava springdoc 快递第三方 BallCat 项目脚手架 minio 文件存储 easyExcel word 处理 x-easypdf itextpdf/知识库 工具包 省市区-国家统计局 省市区+港澳台 png 转 icns 在线图像优化器1 在线图像优化器2 节假日 堡垒机 ip 查询位置 手机号 查询位置 地图瓦片下载器/Java iana 根文件 清华开源镜像网站 软件平台/sourceforge 旷视人工智能平台","link":"/2021/12/28/websites/"}],"tags":[{"name":"blockchain","slug":"blockchain","link":"/tags/blockchain/"},{"name":"eth","slug":"eth","link":"/tags/eth/"},{"name":"nft","slug":"nft","link":"/tags/nft/"},{"name":"databse","slug":"databse","link":"/tags/databse/"},{"name":"mongo","slug":"mongo","link":"/tags/mongo/"},{"name":"ai","slug":"ai","link":"/tags/ai/"},{"name":"disco_local","slug":"disco-local","link":"/tags/disco-local/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"磁盘","slug":"磁盘","link":"/tags/%E7%A3%81%E7%9B%98/"},{"name":"logs","slug":"logs","link":"/tags/logs/"},{"name":"timezone","slug":"timezone","link":"/tags/timezone/"},{"name":"8小时","slug":"8小时","link":"/tags/8%E5%B0%8F%E6%97%B6/"},{"name":"开发工具","slug":"开发工具","link":"/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"matlab","slug":"matlab","link":"/tags/matlab/"},{"name":"kubesphere","slug":"kubesphere","link":"/tags/kubesphere/"},{"name":"redis","slug":"redis","link":"/tags/redis/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"扩容","slug":"扩容","link":"/tags/%E6%89%A9%E5%AE%B9/"},{"name":"后端","slug":"后端","link":"/tags/%E5%90%8E%E7%AB%AF/"},{"name":"mybatis","slug":"mybatis","link":"/tags/mybatis/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"debug","slug":"debug","link":"/tags/debug/"},{"name":"开发经验","slug":"开发经验","link":"/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"},{"name":"umi","slug":"umi","link":"/tags/umi/"},{"name":"websites","slug":"websites","link":"/tags/websites/"}],"categories":[{"name":"blockchain","slug":"blockchain","link":"/categories/blockchain/"},{"name":"databse","slug":"databse","link":"/categories/databse/"},{"name":"ai","slug":"ai","link":"/categories/ai/"},{"name":"eth","slug":"blockchain/eth","link":"/categories/blockchain/eth/"},{"name":"docker","slug":"docker","link":"/categories/docker/"},{"name":"nft","slug":"blockchain/nft","link":"/categories/blockchain/nft/"},{"name":"开发工具","slug":"开发工具","link":"/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"},{"name":"mongo","slug":"databse/mongo","link":"/categories/databse/mongo/"},{"name":"disco_local","slug":"ai/disco-local","link":"/categories/ai/disco-local/"},{"name":"matlab","slug":"matlab","link":"/categories/matlab/"},{"name":"kubesphere","slug":"kubesphere","link":"/categories/kubesphere/"},{"name":"linux","slug":"linux","link":"/categories/linux/"},{"name":"后端","slug":"后端","link":"/categories/%E5%90%8E%E7%AB%AF/"},{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"java","slug":"java","link":"/categories/java/"},{"name":"websites","slug":"websites","link":"/categories/websites/"},{"name":"java","slug":"docker/java","link":"/categories/docker/java/"},{"name":"git","slug":"开发工具/git","link":"/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git/"},{"name":"hexo","slug":"开发工具/hexo","link":"/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hexo/"},{"name":"mybatis","slug":"后端/mybatis","link":"/categories/%E5%90%8E%E7%AB%AF/mybatis/"},{"name":"npm","slug":"前端/npm","link":"/categories/%E5%89%8D%E7%AB%AF/npm/"},{"name":"java","slug":"后端/java","link":"/categories/%E5%90%8E%E7%AB%AF/java/"},{"name":"umi","slug":"前端/umi","link":"/categories/%E5%89%8D%E7%AB%AF/umi/"},{"name":"debug","slug":"后端/java/debug","link":"/categories/%E5%90%8E%E7%AB%AF/java/debug/"}]}